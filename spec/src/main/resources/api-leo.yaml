openapi: 3.0.0

info:
  version: "0.0.1-SNAPSHOT"
  title: Api-Leo

tags:
  - name: "Employees"
    description: "Provides enpoints to view and manage Employees"
  - name: "Departments"
    description: "Provides enpoints to view and manage Departments"

servers:
  - url: "http://127.0.0.1:8080/"
    description: "Local host environment"

paths:
  /employees/paginationa:
    get:
      operationId: "listEmployees"
      description: "Find employees with type A of pagination."
      tags:
        - "Employees"
      parameters:
        - in: "query"
          name: "page"
          description: "Page number you want to see when the data is fetched."
          required: true
          schema:
            type: integer
        - in: "query"
          name: "quantity"
          description: "Quantity of results per page."
          required: true
          schema:
            type: integer
        - in: "query"
          name: "ordination"
          description: "How to order the results: asc or desc."
          required: false
          schema:
            type: string
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'

  /departments/{id}:
    get:
      operationId: "getById"
      description: "Find a department usint its id."
      tags:
        - Departments
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Department'

  /departments/all:
    get:
      operationId: "getAllDepartments"
      description: "Get all departments."
      tags:
        - Departments
      responses:
        200:
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Department'

  /departments:
    post:
      operationId: "createDepartment"
      description: "Creates the given department."
      tags:
        - Departments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentCreation'
        description: "The department to create."
      responses:
        201:
          description: "Created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        400:
          description: "Something was wrong with the data provided."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    EmployeeProperties:
      type: object
      properties:
        name:
          type: string
          description: "Employee's name."
          example: "Kanavilil Rajagopalan"
          maxLength: 255
        telephone:
          type: string
          description: "Telephone number."
          example: "+55 (11) 1234-4567"
          pattern: '\+\d{2} \(\d{2}\) \d{4}-\d{4}'
        department:
          $ref: '#/components/schemas/DepartmentCreation'
      required:
        - name
        - telephone

    EmployeeCreation:
      allOf:
        - $ref: '#/components/schemas/EmployeeProperties'
      properties:
        cpf:
          type: string
          description: "Common brazilian identity."
          example: "123.456.789-01"
          uniqueItems: true
          maxLength: 14
          pattern: '\d{3}\.\d{3}\.\d{3}-\d{2}'
        email:
          type: string
          description: "Common email address."
          example: "tarasankar@jmail.com"
          uniqueItems: true
          format: email
        birthDate:
          type: string
          description: "Birth date."
          format: date
          example: "01/02/1560"
          pattern: '\d{2}\/\d{2}\/\d{4}'
        gender:
          type: string
          description: "Employee's gender."
          example: "male"
      required:
        - cpf
        - email
        - birthDate
        - gender

    EmployeeUpdate:
      allOf:
        - $ref: '#/components/schemas/EmployeeProperties'

    Employee:
      allOf:
        - $ref: '#/components/schemas/EmployeeCreation'
        - type: object
          properties:
            id:
              type: number
          required:
            - id

    DepartmentCreation:
      type: object
      properties:
        description:
          type: string
      required:
        - description

    Department:
      allOf:
        - $ref: '#/components/schemas/DepartmentCreation'
        - type: object
          properties:
            id:
              type: number
          required:
            - id

    Manager:
      allOf:
        - $ref: '#/components/schemas/EmployeeCreation'
        - type: object
      properties:
        password:
          type: string
          writeOnly: true
        access:
          type: array
          items:
            $ref: '#/components/schemas/Access'
      required:
        - password
        - access

    Access:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/Role'
      required:
        - role

    Role:
      type: string
      enum:
        - MANAGER
        - ADMIN
        - SUPERVISOR
        - USER

    ErrorResponse:
      type: object
      properties:
        message:
          type: string

    DtoFormError:
      type: object
      properties:
        field:
          type: string
        error:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  responses:
    400:
      description: "Something went wrong with your request."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    403:
      description: "The user doesn't have permissions to read."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
security:
  - bearerAuth: [ ]
  #TODO finalize
